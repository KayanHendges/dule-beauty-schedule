generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  username String   @unique
  email    String   @unique
  password String
  modified DateTime @updatedAt
  created  DateTime @default(now())

  UsersProfessionals UserProfessional[]

  @@map("users")
}

model Professional {
  id         String   @id @default(uuid())
  name       String   @unique
  email      String?
  profession String?
  modified   DateTime @updatedAt
  created    DateTime @default(now())

  UserProfessional UserProfessional[]
  CustomerNotes    CustomerNotes[]
  Service          Service[]

  @@map("professionals")
}

model UserProfessional {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  user           User         @relation(references: [id], fields: [userId])
  professionalId String       @map("professional_id")
  professional   Professional @relation(references: [id], fields: [professionalId])
  modified       DateTime     @updatedAt
  created        DateTime     @default(now())

  @@map("users_professionals")
}

model ProviderService {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  modified    DateTime  @updatedAt
  created     DateTime  @default(now())
  Service     Service[]

  @@map("provider_services")
}

model Service {
  id                       String                   @id @default(uuid())
  available                Boolean
  comission                Decimal
  defaultDurationInMinutes Int?                     @map("default_duration_in_minutes")
  defaultPrice             Decimal?                 @map("default_price")
  providerServiceId        String                   @map("provider_service_id")
  providerService          ProviderService          @relation(references: [id], fields: [providerServiceId])
  professionalId           String                   @map("professional_Id")
  professional             Professional             @relation(references: [id], fields: [professionalId])
  providerServicePackage   ProviderServicePackage[]
  serviceCustomer          ServiceCustomer[]
  modified                 DateTime                 @updatedAt
  created                  DateTime                 @default(now())

  @@map("services")
}

model ServicePackage {

  id                     String                   @id @default(uuid())
  available              Boolean
  name                   String
  discount               Decimal
  providerServicePackage ProviderServicePackage[]
  modified               DateTime                 @updatedAt
  created                DateTime                 @default(now())

  @@map("services_packages")
}

model ProviderServicePackage {
  id                     String         @id @default(uuid())
  servicePackageId       String         @map("services_package_id")
  providerServicePackage ServicePackage @relation(fields: [servicePackageId], references: [id])
  serviceId              String         @map("service_id")
  service                Service        @relation(fields: [serviceId], references: [id])
  modified               DateTime       @updatedAt
  created                DateTime       @default(now())


  @@map("provider_services_packages")
}

model CustomerAddress {
  id           String   @id @default(uuid())
  description  String
  customerId   String   @map("customer_id")
  customer     Customer @relation(fields: [customerId], references: [id])
  address      String
  number       String?
  complement   String?
  neighborhood String?
  city         String
  state        String
  zipCode      String?  @map("zip_code")
  country      String
  active       Boolean  @default(true)
  modified     DateTime @updatedAt
  created      DateTime @default(now())

  @@map("customers_addresses")
}

model CustomerNotes {

  id             String       @id @default(uuid())
  description    String
  customerId     String       @map("customer_id")
  customer       Customer     @relation(fields: [customerId], references: [id])
  professionalId String       @map("professional_id")
  professional   Professional @relation(fields: [professionalId], references: [id])

  @@map("customers_notes")
}

model Customer {
  id              String            @id @default(uuid())
  name            String            @unique
  cpf             String?
  phoneNumber     Int?              @map("phone_number")
  birthDate       DateTime          @map("birth_date")
  instagram       String?
  email           String?
  modified        DateTime          @updatedAt
  created         DateTime          @default(now())
  customerAddress CustomerAddress[]
  customerNotes   CustomerNotes[]
  serviceCustomer ServiceCustomer[]
  order           Order[]

  @@map("customer")
}

model ServiceCustomer {
  id         String   @id @default(uuid())
  customerId String   @map("customer_id")
  orderId    String   @map("order_id")
  order      Order    @relation(fields: [orderId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  serviceId  String   @map("service_id")
  services   Service  @relation(fields: [serviceId], references: [id])
  modified   DateTime @updatedAt
  created    DateTime @default(now())

  @@map("services_customers")
}

model Order {
  id              String            @id @default(uuid())
  customerId      String            @map("customer_id")
  Customer        Customer          @relation(fields: [customerId], references: [id])
  closed          Boolean
  serviceCustomer ServiceCustomer[]
  modified        DateTime          @updatedAt
  created         DateTime          @default(now())

  @@map("orders")
}
